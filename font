#!/usr/bin/env ruby
require 'open-uri'
require 'json'
require 'launchy'

class String
  # Convert CamelCase to under_scores.
  # Stolen from ActiveSupport
  def underscore
    self.gsub(/::/, '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    tr("-", "_").
    downcase
  end

  def underscore!
    self.gsub!(/::/, '/').
    gsub!(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub!(/([a-z\d])([A-Z])/,'\1_\2').
    tr!("-", "_").
    downcase!
  end
end

class Font
  FONT_LIST_URL = "https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBsSKrux6m0tgiEnmy8r7_pjr0g3CAzo8E"

  @kind
  @family
  @variants
  @subsets
  @version
  @last_modified
  @files

  # Returns an Array with a Font object for every font in the repository.
  def self.all
    JSON.parse(open(FONT_LIST_URL).read)["items"].map { |hash| Font.new(hash) }
  end

  # Returns the font with a given family name
  def self.find(family)
    all.find { |font| font.family.downcase == family.downcase }
  end

  def self.installed
    all.find_all &:installed?
  end

  def self.not_installed
    all.find_all { |font| !font.installed? }
  end

  # The following method was taken from http://pullmonkey.com/2008/01/06/convert-a-ruby-hash-into-a-class-object/
  def initialize(hash)
    hash["lastModified"]

    hash.each do |k,v|
      k = k.to_s.underscore
      self.instance_variable_set("@#{k}", v)  ## create and initialize an instance variable for this key/value pair
      self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})  ## create the getter that returns the instance variable
      self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})  ## create the setter that sets the instance variable
    end
  end

  # Install a font
  # If no weight is specified, all will be installed.
  def install(variants = [])
    variants = [*variants]

    variants.each do |variant|
      puts "Installing #{@family} (#{variant.capitalize})."

      url = @files[variant]

      File.open(installed_file_path(variant), "wb") do |file|
        file.write open(url).read
      end

      puts "#{@family} (#{variant.capitalize}) was successfully installed."
    end

    install_all_variants if variants.empty?
  end

  def install_all_variants
    @variants.each { |variant| install(variant) }
  end

  def uninstall(variants = [])
    variants = [*variants]

    variants.each do |variant|
      if installed?(variant)

        puts "Uninstalling #{@family} (#{variant.capitalize})."
        path = installed_file_path(variant)

        File.delete(path) if File.exist?(path)

        puts "#{@family} (#{variant.capitalize}) was successfully uninstalled."

      end
    end

    uninstall_all_variants if variants.empty?
  end

  def uninstall_all_variants
    @variants.each { |variant| uninstall(variant) }
  end

  def installed?(variant = nil)
    if variant
      File.exist? installed_file_path(variant)
    else
      any_variant_installed?
    end
  end

  # Make a pretty display
  def display
    puts
    display_heading family

    display_collection :variants do |variant|
       print "* #{variant.capitalize}"
       print " (installed)" if installed?(variant)
       puts
    end

    display_collection :subsets
    puts "Last modified: #{last_modified}"
    puts
  end

  # Open a web browser to preview the font
  def preview
    Launchy.open "http://www.google.com/fonts/specimen/" + URI.encode(@family)
  end

  private

  def any_variant_installed?
    @variants.each do |variant|
      return true if installed?(variant)
    end

    return false
  end

  def extension(variant = nil)
    url = variant ? @files[variant] : @files.first
    url.split(".").last
  end

  def installed_file_name(variant)
    "#{@family}-#{@version}-#{variant.capitalize}.#{extension(variant)}"
  end

  def installed_file_path(variant)
    File.expand_path("~/Library/Fonts/" + installed_file_name(variant))
  end

  def display_heading(name)
    puts name
    puts "=" * name.length
    puts
  end

  def display_collection(name, &block)
    puts name.capitalize
    puts "-" * name.length
    collection = instance_variable_get("@#{name}")

    if block_given?
      collection.each(&block)
    else
      collection.each { |item| puts "* #{item.capitalize}" }
    end

    puts
  end
end

case ARGV[0]
when "install"
  if ARGV[1] == "all"
    Font.all.each &:install
  else
    weights = ARGV[2..-1].map &:downcase
    Font.find(ARGV[1]).install(weights)
  end
when "uninstall"
  if ARGV[1] == "all"
    Font.all.each &:uninstall
  else
    weights = ARGV[2..-1].map &:downcase
    Font.find(ARGV[1]).uninstall(weights)
  end
when "list"
  fonts = nil

  case ARGV[1]
  when "installed"
    fonts = Font.installed
  when "not_installed"
    fonts = Font.not_installed
  else
    fonts = Font.all
  end

  if fonts.empty?
    puts "No Google fonts are installed."
  else
    fonts.each { |font| puts font.family }
  end
when "show"
  Font.find(ARGV[1]).display
when "preview"
  Font.find(ARGV[1]).preview
end